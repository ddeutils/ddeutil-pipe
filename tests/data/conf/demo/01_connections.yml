# File System Connection
# ---
#   For file system connection, I will define relative and absolute path as the
# same pattern with the SQLtie connection from SQLAlchemy connection string.
#
#   * relative path:
#     * local:///relative/foo
#     * local:///../tmp/path/foo
#
#   * absolute path:
#     * local:////absolute/path/to/foo
#
conn_local_file:
  type: conn.FlSys
  endpoint: "data/examples/"

conn_local_file_url:
  type: conn.FlSys
  # Absolute Window path: file:///C:/usr/absolute/path/sub-path/
  url: "local:///${ROOT_PATH}/tests/data/examples"

conn_local_file_url_ubuntu:
  type: conn.FlSys
  # Absolute Ubuntu path.
  url: "local:////absolute/path/to/foo"

conn_local_file_url_relative:
  type: conn.FlSys
  url: "local:///data/examples/"

conn_local_file_url_ubuntu_relative:
  type: conn.FlSys
  url: "local:///relative/path/to/foo"

# SFTP & FTP Connection
# ---
conn_sftp:
  type: conn.SFTP
  host: ${SFTP_HOST}
  port: ${SFTP_PORT}
  user: ${SFTP_USER}
  pwd: ${SFTP_PASS}
  endpoint: "data"

conn_sftp_ssh_key:
  type: conn.SFTP
  host: ${SFTP_HOST}
  port: ${SFTP_PORT}
  user: ${SFTP_USER}
  pwd: ${SFTP_PASS}
  endpoint: "data"
  extras:
    ssh_private_key: ./conf/.ssh/key_ssh_gen.pem

conn_sftp_url:
  type: conn.SFTP
  url: "sftp://bastion:P@ssW0rd@127.0.0.1:22/home/bastion/data"


# SQLite Connection
# ---
#   For the SQLite connection config, I will reference path with SQLAlchemy.
#
#   * relative path:
#     * sqlite:///relative/foo.db
#     * sqlite:///../tmp/path/foo.db
#   * absolute path:
#     * sqlite:////absolute/path/to/foo.db
#   * memory
#     * sqlite://
#
conn_sqlite_url:
  type: conn.SQLite
  # Relative path.
  url: "sqlite:///${ROOT_PATH}/tests/data/examples1/demo_sqlite.db"

conn_sqlite_url_failed:
  type: conn.SQLite
  # Relative path.
  url: "sqlite:///${ROOT_PATH}/tests/data/examples1/demo_sqlite.db"

# AWS S3 Connection
# ---
#
conn_s3_url:
  type: conn.S3
  url: "s3://@secrets{s3_data_eng_bucket}"
  aws_access_key_id: "${AWS_ACCESS_ID}"
  aws_access_secret_key: "${AWS_ACCESS_SECRET_KEY}"
  role_arn: "@secrets{s3_data_eng_role_arn}"

conn_azure_blob_de_test:
  type: "conn.AzureBlobSystem"
  endpoint: "abfs://de-test"
  account_name: "@secrets{azure_de_test_account_name}"
  account_key: "@secrets{azure_de_test_account_key}"


# Postgres Connection
conn_aws_pg_sandbox:
  type: "conn.PostgresSystem"
  username: "@secrets{pg_sandbox_username}"
  password: "@secrets{pg_sandbox_password}"
  host: "@secrets{pg_sandbox_host}"
  port: "5432"
  database: "@secrets{pg_sandbox_database}"

conn_postgres:
  type: conn.Postgres
  host: 127.0.0.1
  port: 5432
  user: postgres
  pwd: P@ssW0rd
  endpoint: postgres

conn_aws_pg_uat:
  type: conn.Postgres
  username: "postgres"
  password: "P@ssW0rd"
  host: "50.234.123.10"
  port: 5432
  database: "pg_uat_database"
  ssh_tunnel:
    ssh_host: "102.14.91.290"
    ssh_user: "ec2-user"
    ssh_private_key: "./secrets/ec2-user.key"
    ssh_port: "22"


# MS SQL Server Connection
# ---
conn_azure_sqlserver_dwh_dev:
  type: conn.ODBC
  username: "@secrets{sqlserver_dwh_username}"
  host: "@secrets{sqlserver_dwh_host}"
  port: "1433"
  database: "@secrets{sqlserver_dwh_database}"
  extras:
    driver: "{ODBC Driver 17 for SQL Server}"
    encrypt: true
    trust_server_certificate: false
    connection_timeout: 30
